(function() {
  var Draft;
  Draft = function(selector, scope) {
    if (scope == null) {
      scope = 'draft';
    }
    this.$form = document.querySelector(selector);
    this.autoSaves = [];
    this._scope = scope;
    this.$form.addEventListener('submit', this.clean.bind(this));
    return this;
  };
  Draft.prototype.register = function(selector) {
    var $el;
    $el = this.$form.querySelector(selector);
    $el.addEventListener('keyup', (function(ev) {
      this.save(selector, ev);
    }).bind(this));
    this.autoSaves.push(selector);
    this.restore(selector, $el);
  };
  Draft.prototype.save = function(selector, ev) {
    var $target;
    $target = ev.target;
    if (window.localStorage) {
      if ($target.value.length > 0) {
        localStorage.setItem(this.scope(selector), $target.value);
      } else {
        localStorage.removeItem(this.scope(selector));
      }
    }
  };
  Draft.prototype.restore = function(selector, $el) {
    var draftData;
    $el = $el || this.$form.querySelector(selector);
    if (window.localStorage) {
      draftData = localStorage.getItem(this.scope(selector));
      if (draftData && $el.value.length <= 0) {
        $el.value = draftData;
      }
    }
  };
  Draft.prototype.clean = function() {
    var index, selector;
    if (!window.localStorage) {
      return;
    }
    selector = '';
    for (index in this.autoSaves) {
      selector = this.autoSaves[index];
      localStorage.removeItem(this.scope(selector));
    }
  };
  Draft.prototype.scope = function(selector) {
    return this._scope + '@' + selector;
  };
  window.Draft = Draft;
})();

// ---
// generated by coffee-script 1.9.2